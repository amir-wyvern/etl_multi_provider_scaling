# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include these files in version control.
.idea/

# VS Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# ETL Framework Specific
# Data files - exclude all CSV files in downloads directory
downloads/*.csv
downloads/*.json
downloads/*.parquet
downloads/*.xlsx
downloads/*.xls

# Log files
*.log
logs/
*.log.*

# Metrics and monitoring files
*metrics*.json
*stats*.json
monitoring/

# Configuration files with sensitive data
.env.local
.env.production
.env.staging
config/secrets/
secrets/

# Google Cloud Service Account credentials
credentials.json
service-account-key.json
*-service-account.json
gcp-credentials*.json

# Temporary files
temp/
tmp/
*.tmp
*.temp

# Cache directories
cache/
.cache/

# Output directories (but keep structure)
output/
results/
processed/

# Backup files
*.bak
*.backup
*_backup*
*_bak*

# Test data (keep small test files, exclude large datasets)
test_data/large/
test_data/*.csv
test_data/*.json

# Provider-specific data files
providers/*/data/
providers/*/cache/
providers/*/temp/

# Airflow specific (if using Airflow)
airflow.cfg
airflow.db
airflow_webserver.pid
dags/__pycache__/
logs/

# n8n specific (if using n8n)
.n8n/
n8n_data/

# Docker
.dockerignore
docker-compose.override.yml
.docker/

# Terraform (if using infrastructure as code)
*.tfstate
*.tfstate.*
.terraform/
*.tfvars

# Kubernetes
*.kubeconfig

# Local development
.local/
local_*
dev_*

# IDE and editor specific
*.sublime-project
*.sublime-workspace
.project
.pydevproject

# MacOS
.AppleDouble
.LSOverride
Icon

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Project specific - uncomment as needed
# main.py              # Original monolithic script (keep for reference)
# main_clean.py        # Clean version (keep for reference)
# etl_pipeline*.py     # Previous versions (keep for reference)
